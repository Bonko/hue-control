// Code generated by go-bindata.
// sources:
// assets/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xcb\x4e\xeb\x30\x10\x86\xf7\xe7\x29\xe6\x78\x05\x8b\xd4\x0d\xa8\x42\x42\xb6\x17\x08\x09\xf6\xe5\x05\x9c\x64\xda\x58\xf5\x25\xb2\x27\x48\xe5\xe9\x51\xea\x96\xb6\x51\x29\xe9\xce\x71\xbe\xb9\xe4\x8b\x7e\xd1\x92\xb3\xea\x1f\x00\x80\x68\x51\x37\xf9\xb8\x7b\xfc\x5f\x14\xf0\x12\x02\x25\x8a\xba\x83\xa2\x38\x79\x65\x8d\xdf\x40\x1b\x71\x25\x59\x9d\x12\xaf\x0e\xd4\xcc\x19\x3f\xab\x53\x62\x10\xd1\x4a\x96\x68\x6b\x31\xb5\x88\xc4\xf6\x23\xf8\x71\x86\xa8\x42\xb3\x3d\xe9\xb9\x0a\xd1\x81\xae\xc9\x04\x2f\x19\x4f\x16\xb1\xfb\x30\x0e\x23\x3b\x32\x79\xcb\x52\xc1\x7b\x8f\xb0\x1c\x08\x1a\x88\xa1\x6d\x39\xa2\xac\xae\xd0\xaa\xd7\x3e\xea\xa1\x21\xdc\x39\xe3\x7b\xc2\xfb\xe7\x33\x6a\x47\x26\xb4\x58\x13\x78\xed\x50\xb2\x66\x5f\xc0\x20\x99\x2f\x94\xac\x1c\x4d\xff\xa9\x0a\xdd\x80\xa9\x52\xf0\xfd\xe9\x2a\xb6\x98\x86\x95\xf3\x49\x1c\xe4\x95\xb1\x51\x0f\xd3\x0a\xd4\xe3\x15\x4e\xf0\xdc\x6e\x24\x90\x67\x83\xe7\x97\x55\xbc\xa8\x79\x49\x3a\x92\xf1\x6b\xa8\xa2\x59\xb7\xe4\x31\xa5\xbf\x44\x1f\xc9\xa9\xaa\x17\x13\xbf\xf5\x69\xb2\xec\x1b\x6d\xc3\xa7\xb6\x3d\x4a\x36\x67\x6a\x83\xd8\xdd\x6a\xf4\xa2\xc0\xdf\x2f\x8d\xef\x7a\x02\xda\x76\x28\x59\xea\x2b\x67\x88\x1d\x16\x78\x0b\xe3\x4c\x8c\x7f\x96\xe0\x43\x9a\x0e\x99\xcb\x41\x13\x3c\x47\xfd\x3b\x00\x00\xff\xff\x5b\x48\x38\x44\xf2\x03\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 1010, mode: os.FileMode(420), modTime: time.Unix(1498683488, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

