// Code generated by go-bindata.
// sources:
// assets/.index.html.swp
// assets/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtmlSwp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd9\x3f\x6f\xd3\x4e\x1c\x06\xf0\xa7\xbf\xdf\x82\x50\x6d\xa3\x22\x21\xc1\x74\x3d\x18\xca\x40\xce\x6e\x1b\x81\x90\xe3\x01\x55\xfc\x19\x98\x5a\x40\x8c\x76\x72\xc4\xa7\xda\x3e\xcb\x77\x46\x85\xa1\x4c\x0c\xbc\x00\x78\x0d\x0c\xec\x7d\x1b\xac\x48\xbc\x0c\x16\x24\x90\x50\xec\x84\x96\xaa\xad\x3d\x20\x10\xd2\xf7\x33\xc4\xf1\xdd\xe3\xb3\xf3\xc8\x1e\x22\x27\xfe\xe3\x07\x0f\xd9\xad\x81\x0f\x00\x17\x80\x4b\x7c\xf3\xe9\xca\xfb\xff\xcf\xbf\x59\x03\x12\x5d\xec\x6a\x74\xb3\x9b\x43\xdf\xf4\xc8\xed\x37\x0b\x8a\xa9\x16\xa6\x1a\x8b\xa9\xb2\x69\x9d\x0c\xc6\x3a\x17\x77\x9a\xf1\xb4\x96\x37\xc6\xba\xb0\x95\xce\x44\x6c\x8c\xb4\x46\xa8\x62\x22\xf7\x06\xa9\xcd\xb3\x1e\xcb\x13\x42\xce\xe4\x60\x63\x3d\x68\x1e\xf5\xab\x7c\x95\x5d\x5c\x79\xf4\xb7\x2f\x88\x10\x42\x08\x21\x84\x10\xf2\x07\xd9\x72\x09\xaf\x00\xfc\x37\xdf\xbf\x32\xdf\x2e\x1d\xdb\x12\x42\x08\x21\x84\x10\x42\x08\x21\xe4\xdf\x15\x4f\x80\x72\x19\xf8\xb2\xdc\xbe\xff\x5f\xfc\xff\xff\xea\x01\x9f\x3c\xe0\xc0\x03\xde\x7a\xc0\xd4\x03\xb6\x3c\x60\xd5\x03\xbe\xbb\xc0\x47\x17\xf8\xe0\x02\xef\x5c\xe0\xb5\x0b\xec\xb9\xc0\x8e\x0b\x5c\x73\x01\xb8\xc0\x67\x07\x38\x70\x80\x7d\x07\x48\x1d\xe0\x89\x03\xdc\x75\x80\xcb\x0e\x70\xce\x01\xbe\x2d\xce\x49\x08\x21\x84\x10\x42\x08\x21\xbf\x5b\x28\x42\x91\x86\x22\xb5\x79\xd6\x7e\x46\x60\x8c\xb1\x50\x3c\xd3\x55\xde\x7e\x6f\xf7\xb3\x38\x91\xd9\xe1\x40\x33\xa8\x8a\xb2\xb6\xcc\xbe\x28\xe5\x88\x9b\x3a\xc9\x95\xe5\xec\x79\x9c\xd5\x72\xc4\xef\x69\x7e\x2c\x9c\x54\x5d\x03\xc2\xc8\x4c\x8e\xed\xaf\xa3\xcd\x8c\x2e\xad\xd2\x05\x6b\xe7\xe5\x64\x71\x12\x9f\x47\xbb\x52\x96\xa1\x68\xe7\x4f\x3d\x30\x0a\x7c\xbf\x3b\x74\x73\xd8\x9d\x19\x9e\xb2\x4e\xd8\x5e\x1a\x2b\xe2\x5c\x8e\x78\x52\xa9\x69\x6a\x0b\x69\x0c\x67\x46\xbd\x94\x23\x1e\x1c\x69\x23\x6c\xab\xdc\xb6\x71\x65\x55\x31\x65\x87\xe9\xdb\x38\xb1\x9c\x93\xcb\xef\x6a\x2b\xda\xe8\xfe\xcd\x3f\x1b\x8d\xd6\x7b\x14\x14\xf4\xc8\xf4\xe8\x30\xe8\x53\xe1\xa4\xae\xe2\x59\xe6\x8c\x02\xb7\xe6\x11\xb6\x96\xab\xa2\xb6\xf2\xfa\x91\xfa\xd2\x20\x62\xf7\x6b\xc9\xb6\x33\x29\x4b\xab\x72\x59\xb1\x50\xa4\xc1\xfc\xe6\x9e\xdd\xdb\x2c\x1e\xcf\x0e\x1e\x71\x61\x66\x99\x9d\x59\x86\x47\x08\xdb\x67\xe0\x47\x00\x00\x00\xff\xff\x3b\x44\xb1\x70\x00\x30\x00\x00")

func assetsIndexHtmlSwpBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtmlSwp,
		"assets/.index.html.swp",
	)
}

func assetsIndexHtmlSwp() (*asset, error) {
	bytes, err := assetsIndexHtmlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/.index.html.swp", size: 12288, mode: os.FileMode(384), modTime: time.Unix(1496588875, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xc1\x4e\x03\x21\x10\x86\xef\x7d\x8a\xc9\x9c\xf4\x44\x57\xd3\x98\x18\x96\x93\x89\xde\xeb\x0b\xb0\xed\xd8\x25\x02\x4b\x60\x30\xd1\xa7\x37\x94\xda\x6e\x52\xd7\x5d\x6f\x64\xfe\x8f\x19\xf8\x02\xb2\x67\x67\xd5\x0a\x00\x40\xbe\x0d\xd1\x81\xde\xb1\x19\x7c\x8b\x22\x59\xa2\xf0\x6a\x1c\x45\xac\xf9\x91\xe9\x1b\x05\x2f\x99\x60\x5b\x52\x2e\x29\x48\xd1\x37\x23\xc2\xea\x8e\xac\x7a\xca\x51\x97\x46\x70\xe3\x8c\xcf\x4c\xb7\x8f\x67\xe2\x48\x25\xb2\xb4\x63\xf0\xda\x51\x8b\xfb\x13\x8c\x90\xcc\x17\xb5\xd8\x8c\x26\x9e\x77\x0c\xa1\x20\xaa\x91\xe2\xb4\x9a\x44\x36\xf3\x48\xb3\x9e\x65\xa0\x1e\x91\xf6\xea\x6e\x1e\x56\xf7\x13\x8c\x14\xb5\xcd\x48\x90\xa8\x86\x2e\x85\x2e\x5e\xe9\xdb\xb2\x8e\x6c\xfc\x01\xba\x68\x0e\x3d\x7b\x4a\xe9\x2f\x81\x17\x6a\x89\xc2\xcd\x82\xfb\x3c\x2c\x92\xf8\x0f\x8b\xf0\xa1\x6d\xa6\x16\xd7\xa8\xde\x89\xc2\x52\x5b\x57\x82\x7e\x2f\x18\x1f\x32\x03\x7f\x06\x6a\x31\xe5\xce\x19\xc6\x9f\x81\xcf\x03\x4e\xc8\x97\xa2\xbc\x78\xb5\x92\xa2\x7e\x82\xef\x00\x00\x00\xff\xff\x73\x4f\xba\x43\x0c\x03\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 780, mode: os.FileMode(420), modTime: time.Unix(1496588875, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/.index.html.swp": assetsIndexHtmlSwp,
	"assets/index.html": assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		".index.html.swp": &bintree{assetsIndexHtmlSwp, map[string]*bintree{}},
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

