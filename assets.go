// Code generated by go-bindata.
// sources:
// assets/.index.html.swp
// assets/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtmlSwp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd9\x3d\x8b\xd4\x40\x1c\x06\xf0\xe7\xb4\x10\x04\x33\x72\x62\x3f\x37\x36\x67\xe1\xce\xee\xbd\x80\xc8\x24\x85\x08\x62\x61\xe5\x0b\xd8\x08\x49\x76\xbc\x0d\x26\x99\x90\x99\xf8\x56\x68\x6d\xe7\xc7\xf0\x13\x08\x96\x57\xda\xdb\xfa\x41\xae\x93\xbc\x6c\x71\xc2\xea\x55\x27\xca\xf3\x6b\x26\x99\xff\x93\xc9\x3f\x03\x29\x42\xb2\xf9\xd3\x07\x0f\xe5\xed\xd9\x1c\x00\xae\x02\xc7\xd7\x0f\x9e\x6d\x7f\xbe\x78\xf9\xe3\x2e\x90\xb9\xfa\xa5\xc3\x9f\x85\x83\xc3\xb9\x3f\x43\xee\xfd\xb0\xa0\x3e\x72\xda\xb7\xb9\x3e\x2a\xc2\xaa\xcb\x66\xb9\xab\xf4\xdd\x61\x7e\xd5\xd9\x5b\xb9\xab\x43\xeb\x4a\x9d\x7a\x6f\x83\xd7\x45\xbd\xb4\x6f\x66\xab\x50\x95\x67\x58\x9e\x88\x7e\xeb\x0a\xf6\xf7\x16\xc3\xab\x7e\x43\xed\xc8\x6b\xdb\x4f\xfe\x76\x43\x44\x44\x44\x44\x44\x74\x8e\x42\xb3\x85\x0f\x00\x2e\x4c\xe7\xd1\x34\x6e\xfd\x32\x12\x11\x11\x11\x11\x11\x11\xd1\xbf\x2b\x5d\x02\x36\x02\xbe\x46\xe3\xff\xff\xf5\xf7\xff\x89\x00\x7e\x08\xe0\x8b\x00\x3e\x09\xe0\xb5\x00\x9e\x0b\xe0\x9e\x00\x76\x04\x70\x49\x00\x27\x11\xf0\x3d\x02\xbe\x45\xc0\xf1\x7a\x0d\x22\x22\x22\x22\x22\x22\xfa\xaf\xc9\x73\x66\x8c\x5e\x85\xaa\x4c\x60\xf4\x0b\xd7\x56\x09\xa4\x34\xba\x4c\x33\x5b\x26\x43\x2f\xa6\xa8\x9b\x2e\xc8\xf0\xb6\xb1\xb1\xf2\x5d\x56\x15\x41\xc9\x57\x69\xd9\xd9\x58\xdd\x77\x6a\x0a\x69\x6f\x4b\x9b\x87\x64\x6a\xdf\xb8\x26\x14\xae\x4e\xf6\xe7\x46\x4f\x87\xa7\x2b\x72\xcc\xdb\x65\xb2\xb7\x29\x92\x2c\x36\x56\x0e\x37\x5e\x72\xba\x60\xc6\xbb\xc8\x3a\xad\x6c\xac\x96\x5d\x9b\xf6\x35\x25\x7d\xf1\xce\xc6\x6a\x31\x34\x6f\xc6\x67\x7d\x54\x5a\xdb\x84\xa2\xb2\xad\x5c\xe7\xe4\x6e\x55\xd4\x5d\xb0\x37\xef\xc0\xf4\x5b\x23\xd3\xbc\x9f\x8e\x95\xf6\x7d\xf8\x71\x1f\x56\x09\xcc\xb8\x7d\x3f\x03\x00\x00\xff\xff\x35\xe1\x7a\x49\x00\x30\x00\x00")

func assetsIndexHtmlSwpBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtmlSwp,
		"assets/.index.html.swp",
	)
}

func assetsIndexHtmlSwp() (*asset, error) {
	bytes, err := assetsIndexHtmlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/.index.html.swp", size: 12288, mode: os.FileMode(384), modTime: time.Unix(1496585688, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x3b\x8e\xc3\x20\x10\x40\x7b\x4e\x31\x9a\x6a\xb7\x62\xbd\xab\x6d\x22\xa0\xcd\x01\x92\x0b\x60\x7b\xa2\x20\xf1\x93\x19\x22\x25\xa7\x8f\x30\x4e\x63\xc9\x15\x30\xef\x01\xd2\x53\x77\x0e\xde\x08\x75\x4b\x4b\x00\x3b\xb1\x4b\x51\xa3\x2c\x9e\x28\x5f\x5d\xa0\x05\x8d\x00\x50\xde\x8e\xe4\xcd\xa5\x4d\xb9\x4d\x61\xae\x8b\x6d\x2e\x7c\x05\x17\x2b\xd3\xf7\x49\x00\x00\xa8\x42\x9e\x26\x86\x68\x03\x69\xfc\x48\x08\xc5\xbd\x48\xe3\xb0\x3e\xb6\x7a\x29\x37\x60\x06\x25\xb7\xdd\x0e\xfc\x1f\x81\xe1\xe7\x80\x40\xff\x9a\x66\xf3\x7b\xa4\x98\xbf\x1d\x51\xb2\x5f\xda\x4e\x2e\xe6\xca\xc0\xcf\x4c\x1a\x4b\x1d\x83\x63\x84\x87\xf5\x95\x34\x9e\x53\x0f\x21\x7b\x09\xa1\x64\x0b\xd6\xd6\xde\xef\x1d\x00\x00\xff\xff\xe8\x60\x51\xaf\x47\x01\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 327, mode: os.FileMode(420), modTime: time.Unix(1496585665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/.index.html.swp": assetsIndexHtmlSwp,
	"assets/index.html": assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		".index.html.swp": &bintree{assetsIndexHtmlSwp, map[string]*bintree{}},
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

