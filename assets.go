// Code generated by go-bindata.
// sources:
// assets/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xc1\x8e\x9b\x30\x10\x86\xef\x7d\x8a\xa9\x4f\xed\x01\x1c\x5a\x45\x95\x2a\xc3\xa1\xaa\xd4\x1e\xaa\x5e\xb2\x2f\x60\x60\x12\xac\xd8\x06\xd9\xc3\x4a\x59\xc4\xbb\xaf\x1c\x82\x92\x20\x92\x10\x69\x39\xc1\xcc\xe7\x99\xf9\x7f\xac\x11\x15\x19\x9d\x7d\x02\x00\x10\x15\xca\x72\x78\x3d\x7e\x7e\x8e\x22\xf8\x55\xd7\xe4\xc9\xc9\x06\xa2\xe8\x22\xa5\x95\xdd\x43\xe5\x70\x9b\xb2\xc2\x7b\x9e\x8f\x54\x6c\x94\x8d\x0b\xef\x19\x38\xd4\x29\xf3\x74\xd0\xe8\x2b\x44\x62\xa7\x16\xfc\xdc\x43\xe4\x75\x79\xb8\xa8\xb9\xad\x9d\x01\x59\x90\xaa\x6d\xca\xb8\xd7\x88\xcd\x8b\x32\xe8\xd8\x99\x19\xa6\x4c\x32\xf8\xdb\x22\x6c\x02\x41\x81\x08\x65\x93\x09\xa5\x65\x8e\x3a\xfb\xa7\x76\x15\xfd\xbc\xca\x1c\xb3\x1e\x35\x16\x04\x56\x1a\x4c\x99\x0e\x10\x03\xaf\xde\x30\x65\xc9\xa4\xdd\xf8\x74\x9d\x93\x76\x87\x10\xf7\xfd\x6c\x5e\xd4\x4d\x98\x3c\xeb\xba\xf8\xbf\x34\xd8\xf7\x82\x9f\x22\x37\xca\xa1\x2d\x67\x4a\x09\x3e\x8c\x36\x51\xc3\x07\x39\xd7\xc1\xdc\xcd\x6a\xfe\xdd\x3a\x19\x1a\xc3\x17\xa3\x6c\x4b\xf8\xf5\x91\xfe\xf2\x74\xe0\x91\x05\xa3\xc4\xe4\xbe\xb4\x11\x5b\x2f\xc3\x92\xd5\x22\x0e\x86\x91\xb1\xcc\xbe\x2d\x3b\x90\x7d\xbf\xc3\x7d\x80\xcd\x1b\x92\x8e\x94\xdd\x41\xee\xc2\xfd\xb1\xe8\xfd\x23\xa3\xcf\xe4\x52\xab\xd7\x0b\xb5\xfe\x58\x6c\xf6\x93\x6e\xc3\xab\xd4\x2d\xa6\x6c\xc5\xb2\x3d\x62\xf3\xac\xa3\xb3\x06\xde\x0e\x2a\xdb\xb4\x04\x74\x68\x30\x65\xbe\xcd\x8d\x22\x36\x0e\xf0\xa7\x9e\xee\x81\xe9\xcf\x12\x3c\x6c\x90\x71\xcf\x0c\xcb\x45\xf0\x61\xbd\xbd\x07\x00\x00\xff\xff\xb3\xbc\xf7\xa0\xe6\x04\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 1254, mode: os.FileMode(420), modTime: time.Unix(1498766010, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

